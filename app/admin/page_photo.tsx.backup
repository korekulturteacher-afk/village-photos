'use client';

import { useState, useEffect, useCallback } from 'react';
import Image from 'next/image';

interface Photo {
  id: string;
  name: string;
  drive_file_id: string;
  is_approved: boolean;
  is_public: boolean;
  created_at: string;
  approved_at?: string;
  approved_by?: string;
}

export default function AdminPhotosPage() {
  const [allPhotos, setAllPhotos] = useState<Photo[]>([]);
  const [loading, setLoading] = useState(true);
  const [syncing, setSyncing] = useState(false);
  const [selectedPhotos, setSelectedPhotos] = useState<string[]>([]);
  const [filter, setFilter] = useState<'pending' | 'approved'>('pending');
  const [adminToken, setAdminToken] = useState('');

  // 필터링된 사진 목록 (클라이언트 측 필터링)
  const photos = filter === 'pending'
    ? allPhotos.filter(p => !p.is_approved)
    : allPhotos.filter(p => p.is_approved);

  const fetchPhotos = useCallback(async (token: string) => {
    try {
      setLoading(true);
      // 필터와 관계없이 모든 사진을 가져옴
      const response = await fetch('/api/admin/photos?status=all', {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        setAllPhotos(data.photos);
      } else {
        const error = await response.json();
        alert(error.error || '사진을 불러오는데 실패했습니다.');
      }
    } catch (error) {
      console.error('Error fetching photos:', error);
      alert('사진을 불러오는데 실패했습니다.');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    // Load admin token from localStorage
    const token = localStorage.getItem('admin_token');
    if (token) {
      setAdminToken(token);
      fetchPhotos(token);
    } else {
      setLoading(false);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleLogin = async () => {
    if (!adminToken.trim()) {
      alert('관리자 토큰을 입력해주세요.');
      return;
    }

    localStorage.setItem('admin_token', adminToken);
    setLoading(true);
    await fetchPhotos(adminToken);
  };

  const handleAction = async (action: 'approve' | 'reject' | 'toggle_public', isPublic?: boolean) => {
    if (selectedPhotos.length === 0) {
      alert('사진을 선택해주세요.');
      return;
    }

    try {
      const response = await fetch('/api/admin/photos', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${adminToken}`,
        },
        body: JSON.stringify({
          action,
          photoIds: selectedPhotos,
          isPublic,
        }),
      });

      if (response.ok) {
        const result = await response.json();
        alert(result.message);
        setSelectedPhotos([]);
        await fetchPhotos(adminToken);
      } else {
        const error = await response.json();
        alert(error.error || '작업에 실패했습니다.');
      }
    } catch (error) {
      console.error('Error performing action:', error);
      alert('작업에 실패했습니다.');
    }
  };

  const togglePhotoSelection = (photoId: string) => {
    setSelectedPhotos(prev =>
      prev.includes(photoId)
        ? prev.filter(id => id !== photoId)
        : [...prev, photoId]
    );
  };

  const selectAllPhotos = () => {
    setSelectedPhotos(photos.map(photo => photo.id));
  };

  const clearSelection = () => {
    setSelectedPhotos([]);
  };

  const handleSyncPhotos = async () => {
    if (syncing) return;

    try {
      setSyncing(true);
      const response = await fetch('/api/admin/sync-photos', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${adminToken}`,
        },
      });

      if (response.ok) {
        const result = await response.json();
        alert(`✅ ${result.message}\n\n동기화됨: ${result.synced}개\n전체: ${result.total}개`);
        await fetchPhotos(adminToken);
      } else {
        const error = await response.json();
        alert(`❌ ${error.error || '사진 동기화에 실패했습니다.'}`);
      }
    } catch (error) {
      console.error('Error syncing photos:', error);
      alert('❌ 사진 동기화 중 오류가 발생했습니다.');
    } finally {
      setSyncing(false);
    }
  };

  if (!adminToken) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
          <h1 className="text-2xl font-bold text-center mb-6">관리자 로그인</h1>
          <p className="text-sm text-gray-600 text-center mb-6">
            사진 승인 및 관리 기능을 사용하려면 관리자 암호를 입력하세요.
          </p>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                관리자 암호
              </label>
              <input
                type="password"
                value={adminToken}
                onChange={(e) => setAdminToken(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="관리자 암호를 입력하세요"
              />
            </div>
            <button
              onClick={handleLogin}
              className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              로그인
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">{syncing ? 'Google Drive 동기화 중...' : '로딩 중...'}</p>
        </div>
      </div>
    );
  }

  const isEmpty = allPhotos.length === 0;

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">사진 관리</h1>
            <p className="text-sm text-gray-600 mt-1">
              Google Drive의 사진을 승인하고 공개 여부를 관리합니다
            </p>
          </div>
          <div className="flex space-x-4">
            <button
              onClick={handleSyncPhotos}
              disabled={syncing}
              className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 disabled:opacity-50 flex items-center gap-2"
            >
              {syncing ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span>동기화 중...</span>
                </>
              ) : (
                <>
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  <span>Google Drive 동기화</span>
                </>
              )}
            </button>
            <button
              onClick={() => {
                localStorage.removeItem('admin_token');
                setAdminToken('');
                setAllPhotos([]);
              }}
              className="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700"
            >
              로그아웃
            </button>
          </div>
        </div>

        {/* Empty State - 사진이 없을 때 */}
        {isEmpty && (
          <div className="bg-blue-50 border-2 border-blue-200 rounded-lg p-8 mb-8">
            <div className="text-center">
              <svg className="w-16 h-16 text-blue-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">사진이 없습니다</h3>
              <p className="text-gray-600 mb-6">
                Google Drive에 업로드된 사진을 동기화하려면<br />
                위의 <strong>"Google Drive 동기화"</strong> 버튼을 클릭하세요
              </p>
              <div className="bg-white rounded-lg p-4 text-left max-w-md mx-auto">
                <h4 className="font-semibold text-gray-900 mb-2">📋 동기화 방법:</h4>
                <ol className="text-sm text-gray-600 space-y-2">
                  <li>1. Google Drive에 사진을 업로드합니다</li>
                  <li>2. 위의 "Google Drive 동기화" 버튼을 클릭합니다</li>
                  <li>3. 새로운 사진들이 "승인 대기" 목록에 나타납니다</li>
                  <li>4. 사진을 선택하고 "공개 승인" 또는 "숨김 승인"을 선택합니다</li>
                </ol>
              </div>
            </div>
          </div>
        )}

        {/* Filter Tabs */}
        <div className="flex space-x-4 mb-6">
          <button
            onClick={() => {
              setFilter('pending');
              setSelectedPhotos([]);
            }}
            className={`px-4 py-2 rounded-md ${
              filter === 'pending'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}
          >
            승인 대기 ({allPhotos.filter(p => !p.is_approved).length})
          </button>
          <button
            onClick={() => {
              setFilter('approved');
              setSelectedPhotos([]);
            }}
            className={`px-4 py-2 rounded-md ${
              filter === 'approved'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}
          >
            승인됨 ({allPhotos.filter(p => p.is_approved).length})
          </button>
        </div>

        {/* Action Buttons */}
        {selectedPhotos.length > 0 && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
            <div className="flex items-center justify-between">
              <span className="text-sm text-blue-700">
                {selectedPhotos.length}개의 사진이 선택되었습니다.
              </span>
              <div className="flex space-x-2">
                {filter === 'pending' && (
                  <>
                    <button
                      onClick={() => handleAction('approve', true)}
                      className="bg-green-700 text-white px-3 py-1 rounded text-sm hover:bg-green-800"
                    >
                      공개 승인
                    </button>
                    <button
                      onClick={() => handleAction('approve', false)}
                      className="bg-yellow-600 text-white px-3 py-1 rounded text-sm hover:bg-yellow-700"
                    >
                      숨김 승인
                    </button>
                    <button
                      onClick={() => handleAction('reject')}
                      className="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700"
                    >
                      거부
                    </button>
                  </>
                )}
                {filter === 'approved' && (
                  <>
                    <button
                      onClick={() => handleAction('toggle_public', false)}
                      className="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700"
                    >
                      숨기기
                    </button>
                    <button
                      onClick={() => handleAction('toggle_public', true)}
                      className="bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700"
                    >
                      공개하기
                    </button>
                  </>
                )}
                <button
                  onClick={clearSelection}
                  className="bg-gray-600 text-white px-3 py-1 rounded text-sm hover:bg-gray-700"
                >
                  선택 해제
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Select All Button */}
        <div className="mb-4">
          <button
            onClick={selectAllPhotos}
            className="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700"
          >
            전체 선택
          </button>
        </div>

        {/* Photos Grid */}
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {photos.map((photo) => (
            <div
              key={photo.id}
              className={`bg-white rounded-lg shadow-md overflow-hidden cursor-pointer transition-all ${
                selectedPhotos.includes(photo.id)
                  ? 'ring-2 ring-blue-500 ring-offset-2'
                  : 'hover:shadow-lg'
              }`}
              onClick={() => togglePhotoSelection(photo.id)}
            >
              <div className="relative aspect-square">
                {/* eslint-disable-next-line @next/next/no-img-element */}
                <img
                  src={`/api/thumbnail/${photo.id}`}
                  alt={photo.name}
                  className="object-cover w-full h-full"
                  loading="lazy"
                  onError={(e) => {
                    const target = e.target as HTMLImageElement;
                    // Fallback to full image if thumbnail fails
                    if (!target.src.includes('/api/image/')) {
                      target.src = `/api/image/${photo.id}`;
                    }
                  }}
                />
                {selectedPhotos.includes(photo.id) && (
                  <div className="absolute top-2 right-2 bg-blue-600 text-white rounded-full w-6 h-6 flex items-center justify-center">
                    ✓
                  </div>
                )}
              </div>
              <div className="p-4">
                <h3 className="text-sm font-medium text-gray-900 truncate" title={photo.name}>
                  {photo.name}
                </h3>
                <div className="mt-2 flex items-center justify-between text-xs text-gray-500">
                  <span>{new Date(photo.created_at).toLocaleDateString()}</span>
                  {photo.is_approved && photo.is_public && (
                    <span className="bg-green-100 text-green-800 px-2 py-1 rounded">
                      공개
                    </span>
                  )}
                  {photo.is_approved && !photo.is_public && (
                    <span className="bg-yellow-100 text-yellow-800 px-2 py-1 rounded">
                      비공개
                    </span>
                  )}
                  {!photo.is_approved && (
                    <span className="bg-red-100 text-red-800 px-2 py-1 rounded">
                      대기중
                    </span>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>

        {!isEmpty && photos.length === 0 && (
          <div className="text-center py-12">
            <p className="text-gray-500">
              {filter === 'pending' ? '승인 대기 중인 사진이 없습니다.' : '승인된 사진이 없습니다.'}
            </p>
            {filter === 'pending' && (
              <button
                onClick={handleSyncPhotos}
                disabled={syncing}
                className="mt-4 text-blue-600 hover:text-blue-700 underline"
              >
                Google Drive에서 새 사진 가져오기
              </button>
            )}
          </div>
        )}
      </div>
    </div>
  );
}